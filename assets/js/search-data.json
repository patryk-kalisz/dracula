{
  
    
        "post0": {
            "title": "Instead of intro",
            "content": "print(price_matrix.shape, count_matrix.shape, volume_matrix.shape, tradebook.shape, time.shape) print(price_matrix.dtype, count_matrix.dtype, volume_matrix.dtype, tradebook.dtype, time.dtype) . (1, 10, 52027) (1, 10, 52027) (1, 10, 52027) (52027, 3) (52027, 1) float64 float64 float64 float64 datetime64[us] . A lot of data! . I guess it might be right place to explain motivations behind why I even bother to analyze order book, not omnipresent OHLCV data. . OHLCV or Open, High, Low, Close, Volume are aggregates that could be derived from tradebook array connected with time vector. So let&#39;s see what&#39;s inside chunk of tradebook. . Colums of the array mean: . price of the transaction - self explanatory | volume traded | count of transactions - something that OHLCV is missing | The first printed row [1940. 10. 3.] says: for the price 1940.0 there were 10 instruments traded (Volume) that were performed with 3 (Count) counterparties. This last piece of information is basically saying that 4 different investors performed the trade while 3 were on the same side (bid or ask) and 1 investor was on the opposite side (ask or bid). The last part is something I deducted preprocessing the data. It hasn&#39;t been written anywere. . selected_range = range(160,170) print(tradebook[selected_range,:],&#39; n&#39;, &#39; n&#39;, time[selected_range]) . [[1940. 10. 3.] [ 0. 0. 0.] [ 0. 0. 0.] [1940. 2. 2.] [ 0. 0. 0.] [ 0. 0. 0.] [ 0. 0. 0.] [ 0. 0. 0.] [1940. 15. 3.] [ 0. 0. 0.]] [[&#39;2021-02-04T08:54:59.749081&#39;] [&#39;2021-02-04T08:55:00.352153&#39;] [&#39;2021-02-04T08:55:00.368089&#39;] [&#39;2021-02-04T08:55:00.389785&#39;] [&#39;2021-02-04T08:55:00.389785&#39;] [&#39;2021-02-04T08:55:01.371481&#39;] [&#39;2021-02-04T08:55:01.393664&#39;] [&#39;2021-02-04T08:55:01.409254&#39;] [&#39;2021-02-04T08:55:01.424883&#39;] [&#39;2021-02-04T08:55:01.424883&#39;]] . Collected data . Hmmm, tradebook array is not very populated, is it? This is a good time to explain what I actually collect, and what is stored in places occupied by zeros? . Live downloading of the data gathers literally every change in the limit order book with the timestamp when the event has happened. There might be lots of events happenning (while OHLCV gathers only one specific - Trades). Example of events that happen every day for tens of thousands times on one instruments (apart obvious Trades): . Some investor input new limit order to buy no higher than 1939.0 of 3 pieces of observed instrument. That event changes count_matrix adding +=1, volume_matrix is +=3 on the same place where 1939.0 price is in the limit orderbook. | Another investor that already had an order placed as buy limit of 5 pieces for no more than 1938.0 decides that they&#39;ll shift the order lower, as bigger drop in the price is expected. Then they modifies existing order not changing volume but only price to 1937.0. This deducts -=5 on the volume_matrix, -=1 on count_matrix in place where price 1938.0 is and at the same time adds those values one level lower. | Cancelation of order | print(f&#39;{np.sum(tradebook[:,0]!=0)/tradebook.shape[0]*100:0.2f}%&#39;) . 6.78% . Tradebook stands only for a fraction of events that happen every day! . Of course, it might be the case that trades prices &amp; volumes are the most important information for - let&#39;s say it for the first time - prediction of the future prices. But wouldn&#39;t it be also important to add some deeper layers of understanding what is going on everyday on the stock exchange? . For instance, taking the above chunk of tradebook one might ask - who initiated the trade? I mean, one side of the transaction was (probably) on the limit order book and the second executed the marked order clearing the existing limit order. So who executed market order clearing the other side? Placing market order by the investor is suggesting something about their expectations of the future prices, isn&#39;t it? . On top of that, what if we could detect investors ever-shifting the orders, so ones that clearly don&#39;t have intention to trade within current price range, but are present in the order book anyway? We&#39;re not able to identify intentions of individual investors that have orders opened with assumed no will to perform actual transactions, but maybe there is some pattern order book moves? . On most stock exchanges there is possibility to hide total value of your order allowing others to see just a tip of an iceberg. What if we could find out where these shy investors are? . Last point on motivations behind adding order book to data sources of financial analysis. If OHLCV is something that widely available to anyone with Internet connection, is there still a value in it? . Let&#39;s move on to the data collected. Gathering literally every event allowes to simply count events. Results of this simple excersise tells something on its own. Below there is 5 minutes rolling count of events across one day. Not surprisingly - the beginning and the end of the session are places with most order book activity. Looks similar to the distribution of volumes traded during the day. . plt.plot(time, pd.DataFrame(np.arange(time.shape[0]), index=time.reshape(-1)).rolling(&#39;5min&#39;).count().values) plt.show() . Order book matrices . For the same selected_range as in case of tradebook, let&#39;s see what the data of order book matrices looks like. I&#39;ll describe it for you: in rows you see descending order of prices. Top 5 rows are best ask prices, volumes and counts. They are followed by bottom 5 rows that represents 5 best best bid prices. First column of every matrix is image of order book for the same timestamp. So we can say that on the moment represented by the first column best prices were created by: . 7 investors wanting to sell 28 pieces of analyzed instrument for 1940.0, while | 4 investor wanting to buy 14 pieces of analyzed instrument for 1939.0 | . Wait a second! That should enable to answer one of our questions asked above! . Please just accept that tradebook index is shifted by 3 rows. It&#39;s due to the fact that orderbook change that transaction makes is recorder before the transaction itself. It is specific to the particular data API I&#39;m using and is most probably different elsewhere. It&#39;s also not a subject of this blog. . The transaction we&#39;re matching with change of the order book from column 1 to column 2 saw is [1940. 2. 2.]. So market order had to come from the bid side! Maybe it&#39;s buying pressure? We also see that the count of orders at first ask decreased by 1, while count of transactions is 2. That must&#39;ve been two investors performing market orders. . Additionally, analyzed chunk of order and trade books says that there is some pressure from bid side (additional volume of 10 on the last level of orderbook in the first column), then there are decreases in ask side (one is most probably another transaction initiated by bid side and the second is one investor changing or cancelling their order of 10) . print(&#39;price n&#39;, price_matrix[:,:,selected_range],&#39; n&#39;, &#39; n&#39;,&#39;volume n&#39;, volume_matrix[:,:,selected_range],&#39; n&#39;, &#39; n&#39;,&#39;count n&#39;, count_matrix[:,:,selected_range],&#39; n&#39;, &#39; n&#39;) print(&#39;volume diff n&#39;,np.diff(volume_matrix[:,:,selected_range],axis=2),&#39; n&#39;, &#39; n&#39;,&#39;count diff n&#39;, np.diff(count_matrix[:,:,selected_range],axis=2)) . price [[[1944. 1944. 1944. 1944. 1944. 1944. 1944. 1944. 1944. 1944.] [1943. 1943. 1943. 1943. 1943. 1943. 1943. 1943. 1943. 1943.] [1942. 1942. 1942. 1942. 1942. 1942. 1942. 1942. 1942. 1942.] [1941. 1941. 1941. 1941. 1941. 1941. 1941. 1941. 1941. 1941.] [1940. 1940. 1940. 1940. 1940. 1940. 1940. 1940. 1940. 1940.] [1939. 1939. 1939. 1939. 1939. 1939. 1939. 1939. 1939. 1939.] [1938. 1938. 1938. 1938. 1938. 1938. 1938. 1938. 1938. 1938.] [1937. 1937. 1937. 1937. 1937. 1937. 1937. 1937. 1937. 1937.] [1936. 1936. 1936. 1936. 1936. 1936. 1936. 1936. 1936. 1936.] [1935. 1935. 1935. 1935. 1935. 1935. 1935. 1935. 1935. 1935.]]] volume [[[ 48. 48. 48. 48. 48. 48. 48. 48. 48. 48.] [ 42. 42. 42. 42. 42. 32. 32. 32. 32. 32.] [ 18. 18. 18. 18. 18. 18. 18. 18. 18. 18.] [ 36. 36. 36. 36. 36. 36. 36. 36. 36. 36.] [ 28. 26. 26. 26. 26. 15. 15. 15. 15. 15.] [ 14. 14. 14. 14. 14. 14. 14. 14. 14. 14.] [ 23. 23. 23. 23. 23. 23. 23. 23. 23. 23.] [ 41. 41. 41. 41. 41. 41. 41. 41. 41. 41.] [139. 139. 139. 139. 139. 139. 139. 139. 139. 139.] [ 43. 53. 53. 53. 53. 53. 53. 53. 53. 53.]]] count [[[12. 12. 12. 12. 12. 12. 12. 12. 12. 12.] [11. 11. 11. 11. 11. 10. 10. 10. 10. 10.] [ 6. 6. 6. 6. 6. 6. 6. 6. 6. 6.] [ 7. 7. 7. 7. 7. 7. 7. 7. 7. 7.] [ 7. 6. 6. 6. 6. 5. 5. 5. 5. 5.] [ 4. 4. 4. 4. 4. 4. 4. 4. 4. 4.] [12. 12. 12. 12. 12. 12. 12. 12. 12. 12.] [18. 18. 18. 18. 18. 18. 18. 18. 18. 18.] [14. 14. 14. 14. 14. 14. 14. 14. 14. 14.] [19. 20. 20. 20. 20. 20. 20. 20. 20. 20.]]] volume diff [[[ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. -10. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ -2. 0. 0. 0. -11. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 10. 0. 0. 0. 0. 0. 0. 0. 0.]]] count diff [[[ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. -1. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [-1. 0. 0. 0. -1. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 0. 0. 0. 0. 0. 0. 0. 0. 0.] [ 1. 0. 0. 0. 0. 0. 0. 0. 0.]]] . The plot instead of summary . That would be all for the first post. I hope this post made you at least a bit curious. . Just to finish with a plot - let&#39;s see how the price behaved few minutes after analyzed chunk, say 1000 timestamps later. . But before let&#39;s introduce wide-spread concept of midprice that will come handy later (due to the fact that transactions don&#39;t happen on every event). . midprice=((price_matrix[:,4,:] + price_matrix[:,5,:])/2).reshape(-1) future = 1000 plt.plot(time[selected_range[-1]:selected_range[-1]+future], midprice[selected_range[-1]:selected_range[-1]+future]) . [&lt;matplotlib.lines.Line2D at 0x1e58e79bb38&gt;] .",
            "url": "https://patryk-kalisz.github.io/testfastpages/2021/02/05/instead-of-intro.html",
            "relUrl": "/2021/02/05/instead-of-intro.html",
            "date": " • Feb 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://patryk-kalisz.github.io/testfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://patryk-kalisz.github.io/testfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This website is intended to be a notebook gathering ideas connected with statistical exploration of the limit order book properties. Currently, data I’ve gathered is tick data downloaded during live sessions from Warsaw Stock Exchange (WSE) for a dozen of instruments (mainly WIG20 stocks and futures for this index). The dataset first records have been downloaded midyear 2018. Downloading and storing the data takes place every day for a selected group of most liquid instruments on WSE. Unfortunately data set is not complete: . I’ve decided to include or exclude some instruments from downloading | Some intra-day data might be missing (Internet problems, blackouts etc.) | Some periods are missing (no data for whole day for none of the instruments) | . It is not a goal of the website to present downloading and preprocessing. On this blog, I will scratch my head about features coming from the data that has already been downloaded, stored and initially preprocessed for further analysis. . This website is powered by fastpages 1. Icons by svgrepo.com . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://patryk-kalisz.github.io/testfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://patryk-kalisz.github.io/testfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}